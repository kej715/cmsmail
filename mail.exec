/*----------
 *
 * Created by: Kevin E. Jordan
 *             Nostalgic Computing Center
 *             http://www.nostalgiccomputing.org
 *
 *----------

 MAIL recognizes these commands:

   A - reply to all recipients of the last email message displayed
   D - mark for deletion the last email message displayed
   G - get new email messages from your reader
   H - display headers of email messages in your mailbox
   L - same as H
   Q - quit from MAIL without deleting any email messages
   R - reply only to the sender of the last email message displayed
   S - send an email message
   U - unmark for deletion the last message displayed
   X - eXit from MAIL and delete mll email essages marked for deletion

 To display an email message, enter its number. Press the return key to
 advance to the next email message.

 Email addresses may be entered using any of these forms:

   user
   user@node
   user AT node
*/
mailerid = "MAILER" /* userid of VM running MAIL in server mode */
maxlinewidth = 80
mailboxfile = "MAILBOX MAIL A1"
tempmbxfile = "MAILBOX TEMP A1"
messagefile = "MESSAGE MAIL A1"
tempmsgfile = "MESSAGE TEMP A1"
servermode = 0

parse arg addrs "(" options ")"
call init
subject = ""
if options <> "" then
  do
  options = strip(options)
  parse var options keyword rest
  keyword = translate(strip(keyword))
  if keyword = "SERVER" then
    do
    call servermode
    exit 0
    end
  else if abbrev("SUBJECT", keyword, 2) then
    do
    subject = strip(rest)
    end
  else
    do
    say "Unrecognized option:" keyword
    exit 1
    end
  end
if addrs = "" then
  do
  count = readnewmail()
  if count < 1 then
    say "No new mail"
  else if count = 1 then
    say count "new mail message"
  else
    say count "new mail messages"
  call readheaders
  call displayheaders
  call processcommands
  end
else
  do
  rcptcount = 0
  do while addrs <> ""
    parse upper var addrs user at node rest
    if at = "AT" & node <> "" then
      do
      addrs = strip(rest)
      end
    else
      do
      addrs = strip(at node rest)
      parse var user user "@" node
      if node = "" then
        node = thisnode
      end
    rcptcount = rcptcount + 1
    rcpts.rcptcount = strip(user)||"@"||strip(node)
    end
  rcpts.0 = rcptcount
  call sendmessage rcpts., subject
  end
call finis

/*
 * servermode
 *
 * Enter mail server mode. Loop forever processing mail messages arriving
 * in the virtual reader.
 */
servermode:
say "Entering mail server mode ..."
servermode = 1
do forever
  count = readnewmail()
  if count < 1 then
    do
    "execio 0 cp (string SLEEP 10 SEC"
    end
end
 
/*
 * init
 *
 * Initialize the program.
 */
init:
cc. = ""
from. = ""
replyto. = ""
status. = " "
subject. = ""
to. = ""
"cp set imsg off"
"cp spool rdr class *"
call erasefile messagefile
call erasefile tempmbxfile
call erasefile tempmsgfile

/* get the timezone of the machine */
"execio 1 cp (string Q TIME"
pull . . . timezone .
 
/* get name of this node from SYSTEM NETID S */
thisnode = "VM370CE"
theirs = queued()
call readlines "system netid s", 1, "*"
do while queued() > theirs
  pull cpuid nodeid netid
  if netid = "RSCS" then
    do
    thisnode = nodeid
    end
end
say "Welcome to Mail v1.0 on node" thisnode
say ""
return
 
/*
 * finis
 *
 * Gracefully exit the program.
 */
finis:
say "Goodbye, come back soon!"
"cp set imsg on"
exit
 
/*
 * sendmessage
 *
 * Create a mail message and send it to a specified set of
 * recipient addresses.
 *
 * arg(1) : recipient addresses
 * arg(2) : subject of message
 */
sendmessage:
parse arg rcpts., subject
if subject = "" then
  do
  say "Please enter the subject of the message:"
  parse pull subject
  end
queue "HELO" thisnode
queue "MAIL FROM:<"strip(userid())||"@"||thisnode||">"
call writestackedlines messagefile, 2
do i = 1 for rcpts.0
  parse upper value rcpts.i with user at node
  if at = "" | at <> "AT" | node = "" then
    do
    parse var user user "@" node
    if node = "" then
      node = thisnode
    end
  user = strip(user)
  node = strip(node)
  queue "RCPT TO:<"||user||"@"||node||">"
  call writestackedlines messagefile, 1
end
queue "DATA"
queue "Date:" date("Normal") time("Normal") timezone
queue "From:" strip(userid())||"@"||thisnode
header = "To:"
do i = 1 for rcpts.0
  parse upper value rcpts.i with user at node
  if at = "" | at <> "AT" | node = "" then
    do
    parse var user user "@" node
    if node = "" then
      node = thisnode
    end
  user = strip(user)
  node = strip(node)
  addr = user||"@"||node
  if length(header) + length(addr) + 2 > maxlinewidth then
    do
    queue header
    call writestackedlines messagefile, 1
    header = "   "
    end
  header = header||" "||addr
  if i < rcpts.0 then
    header = header||","
end
queue header
queue "Subject:" subject
queue ""
call writestackedlines messagefile, 3
say "Please enter message body, and end with a line containing only '.':"
do forever
  parse pull line
  if line = "." then
    leave
  push line
  call writestackedlines messagefile, 1
end
call writeline messagefile, "."
call spoolmessage mailerid, thisnode
if result = 0 then
  say "Message sent"
else
  say "Failed to send message, rc =" result
call erasefile messagefile
return
 
/*
 * processcommands
 *
 * Read and process commands entered by the user.
 */
processcommands:
msgnum = 0
do forever
  say ""
  say "Please enter a command or message number (? for help)"
  pull command
  select
    when datatype(command, "NUM") then
      do
      msgnum = command
      call displaymessage msgnum
      end
    when command = "" then
      do
      msgnum = msgnum + 1
      call displaymessage msgnum
      end
    when command = "A" then
      do
      if msgnum > 0 & msgnum <= msgcount then
        call sendreply 1
      end
    when command = "D" then
      do
      if msgnum > 0 & msgnum <= msgcount then
        do
        status.msgnum = "DELETE"
        say "Message" msgnum "marked to be deleted"
        msgnum = msgnum + 1
        call displaymessage msgnum
        end
      end
    when command = "G" then
      do
      count = readnewmail()
      if count < 1 then
        say "No new mail"
      else if count = 1 then
        say count "new mail message"
      else
        say count "new mail messages"
      call readheaders
      end
    when command = "H" | command = "L" then
      do
      call displayheaders
      end
    when command = "Q" then
      do
      say "Keeping all messages"
      call finis
      end
    when command = "R" then
      do
      if msgnum > 0 & msgnum <= msgcount then
        call sendreply 0
      end
    when command = "S" then
      do
      rcptcount = 0
      say "Please enter recipient addresses separated by commas:"
      parse pull list
      list = strip(list)
      do forever
        if index(list, ",") = 0 then
          do
          if list <> "" then
            do
            rcptcount = rcptcount + 1
            rcpts.rcptcount = list
            end
          leave
          end
        else
          do
          parse var list addr "," list
          list = strip(list)
          rcptcount = rcptcount + 1
          rcpts.rcptcount = addr
          if list = "" then
            do
            say "Please continue to enter recipient addresses separated by commas:"
            parse pull list
            list = strip(list)
            end
          end
      end
      rcpts.0 = rcptcount
      call sendmessage rcpts.
      end
    when command = "U" then
      do
      if msgnum > 0 & msgnum <= msgcount then
        do
        status.msgnum = " "
        say "Message" msgnum "unmarked to be deleted"
        end
      end
    when command = "X" then
      do
      call updatemailbox
      call finis
      end
    when command = "?" then
      do
      linenum = 1
      do while sourceline(linenum) <> " *----------"
        linenum = linenum + 1
      end
      linenum = linenum + 1
      do while sourceline(linenum) <> "*/"
        say sourceline(linenum)
        linenum = linenum + 1
      end
      end
    otherwise
      do
      say "Unrecognized command, press '?' for help."
      end
    end
end
 
/*
 * readheaders
 *
 * Read headers of messages in the mailbox.
 */
readheaders: procedure expose cc. date. end. from. mailboxfile msgcount start.,
                              status. subject. to.
msgnum = 1
recnum = 1
readhdr = 1
start.msgnum = recnum
do forever
  call readlines mailboxfile, recnum, 1
  select
  when result = 0 then
    do
    parse pull line
    recnum = recnum + 1
    if line = "." then
      do
      end.msgnum = recnum - 1
      msgnum = msgnum + 1
      start.msgnum = recnum
      readhdr = 1
      end
    else if readhdr = 1 then
      do
      if length(strip(line)) = 0 then
        do
        readhdr = 0
        end
      else
        do
        if substr(line,1,1) = " " then
          do
          text = line
          end
        else
          do
          parse var line keyword ":" text
          end
        keyword = translate(keyword)
        text = strip(text)
        select
        when keyword = "STATUS" then
          do
          if status.msgnum = " " then
            do
            status.msgnum = translate(text)
            end
          end
        when keyword = "FROM" then
          do
          from.msgnum = text
          end
        when keyword = "REPLY-TO" then
          do
          replyto.msgnum = text
          end
        when keyword = "DATE" then
          do
          commapos = pos(",", text)
          if commapos > 0 then
            do
            text = strip(substr(text, commapos + 1))
            end
          parse var text datehour ":" min ":" .
          date.msgnum = datehour||":"||min
          end
        when keyword = "SUBJECT" then
          do
          subject.msgnum = text
          end
        when keyword = "TO" then
          do
          to.msgnum = text
          do forever
            call readlines mailboxfile, recnum, 1
            parse pull line
            if length(strip(line)) = 0 | substr(line,1,1) <> " " then leave
            to.msgnum = to.msgnum||" "||strip(line)
            recnum = recnum + 1
            end
          end
        when keyword = "CC" then
          do
          cc.msgnum = text
          do forever
            call readlines mailboxfile, recnum, 1
            parse pull line
            if length(strip(line)) = 0 | substr(line,1,1) <> " " then leave
            cc.msgnum = cc.msgnum||" "||strip(line)
            recnum = recnum + 1
            end
          end
        otherwise
          do
          end
        end /* select */
        end
      end
    end
  when result = -12 then
    do
    leave
    end
  when result = 28 then
    do
    leave
    end
  otherwise
    do
    say "Failed to read mailbox, rc =" result
    leave
    call finis
    end
  end /* select */
end /* do forever */
msgcount = msgnum - 1
return
 
/*
 * displayheaders
 *
 * Display message headers
 */
displayheaders:
say ""
if msgcount < 1 then
  do
  say "Mailbox is empty"
  return
  end
say "Msg #" left("From",17) left("Date",20) left("Subject",35)
say left("-",5,"-") left("-",17,"-") left("-",20,"-") left("-",35,"-")
m = 1
do while m <= msgcount
  select
    when status.m = "UNREAD" then
      statusflag = "*"
    when status.m = "DELETE" then
      statusflag = "X"
    otherwise
      statusflag = " "
  end
  say statusflag right(m,3) left(from.m,17) left(date.m,20) left(subject.m,35)
  m = m + 1
end
return
 
/*
 * displaymessage
 *
 * Display the contents of a specified mail message.
 */
displaymessage:
msgnum = arg(1)
if msgnum < 1 | msgnum > msgcount then
  do
  say "End of mailbox"
  return
  end
say "==================== Message" msgnum "===================="
call readlines mailboxfile, start.msgnum, 1
parse pull line
if translate(substr(line, 1, 7)) <> "STATUS:" then
  do
  say line
  end
linecount = end.msgnum - (start.msgnum + 1)
call readlines mailboxfile, start.msgnum + 1, linecount
do linecount
  parse pull line
  if line = ".." then
    say "."
  else
    say line
end
if status.msgnum = "UNREAD" then
  status.msgnum = "READ"
return
 
/*
 * readnewmail
 *
 * Query the virtual reader for email messages. Class M files in the
 * reader are expected to be email messages. Distinguish plain
 * RFC822-formatted messages from BSMTP-formatted ones, and handle
 * them accordingly. Messages addressing the calling user are appended
 * to the mailbox file.
 */
readnewmail:
theirs = queued()
"set cmstype ht"
"executil qreader class m"
status = rc
"set cmstype rt"
if status <> 0 then
  return 0
spoolids = ""
count = 0
do while queued() > theirs
  pull spoolid rest
  spoolids = spoolids spoolid
  count = count + 1
end
if count > 0 then
  do
  "execio 0 cp (string ORDER RDR" spoolids
  do count
    "set cmstype ht"
    "readcard" messagefile
    "set cmstype rt"
    theirs = queued()
    call readlines messagefile, 1, "*"
    parse pull token rest 
    push token rest
    if translate(token) = "HELO" then
      do
      call readbsmtpmessage theirs
      end
    else /* RFC822-formatted message without BSMTP envelope */
      do
      call readrfc822message theirs
      end
    call erasefile messagefile
  end
  end
return count

/*
 * readrfc822message
 *
 * Read an RFC822-formatted message without a BSMTP envelope and
 * append it to the user's mailbox file.
 *
 * arg(1) - stack limit value
 */
readrfc822message:
arg theirs
push "Status: Unread"
do while queued() > theirs
  parse pull line
  if line = "." then
    call writeline mailboxfile, ".."
  else
    do
    push line
    call writestackedlines mailboxfile, 1
    end
  end
call writeline mailboxfile, "."
return

/*
 * readbsmtpmessage
 *
 * Read a BSMTP-formatted message and parse its envelope. Recognize
 * "RCPT TO:" commands and parse the addresses they specify. Append
 * the RFC822-formatted message content to the user's mailbox file
 * if any "RCPT TO:" addresses match the calling user's address.
 * Forward the message to the virtual reader(s) of other user(s)
 * addressed.
 *
 * arg(1) - stack limit value
 */
readbsmtpmessage:
arg theirs
/* parse the BSMTP envelope */
thisuser = strip(userid())||"@"||thisnode
isthisuser = 0
rcptcount = 0
originator = ""
originhost = ""
do while queued() > theirs
  parse pull command rest
  command = translate(command)
  select
  when command = "RCPT" then
    do
    parse var rest "TO" ":" "<" address ">"
    address = translate(strip(address))
    if address = thisuser then
      do
      isthisuser = 1
      end
    else if address <> "" then
      do
      rcptcount = rcptcount + 1
      rcpts.rcptcount = address
      end
    end
  when command = "HELO" then
    do
    originhost = strip(rest)
    end
  when command = "MAIL" then
    do
    parse var rest "FROM" ":" "<" address ">"
    originator = strip(address)
    end
  when command = "DATA" then
    do
    leave
    end
  end /* select */
end /* do while */
if servermode <> 1 & isthisuser = 1 & rcptcount < 1 then
  do
  /*
   * MAIL is not operating in server mode, and The message has
   * exactly one recipient, and the recipient is the calling user.
   */
  call writeline mailboxfile, "Status: Unread"
  do while queued() > theirs
    parse pull line
    if line = "." then
      do
      do while queued() > theirs
        pull line
      end
      leave
      end
    else
      do
      push line
      call writestackedlines mailboxfile, 1
      end
    end
  call writeline mailboxfile, "."
  return
  end
/*
 * MAIL is operating in server mode, or the message is addressed to
 * another user, or it has multiple recipients, one of which might
 * be the calling user.
 */
if servermode = 1 then
  do
  if originhost = thisnode then
    push "Received: by" thisnode "with BSMTP;",
         date("Normal") time("Normal") timezone
  else
    push "Received: from" originhost "by" thisnode "with BSMTP;",
         date("Normal") time("Normal") timezone
  call writestackedlines tempmsgfile, 1
  end
do while queued() > theirs
  parse pull line
  if line = "." then
    do
    do while queued() > theirs
      pull line
    end
    leave
    end
  else
    do
    push line
    call writestackedlines tempmsgfile, 1
    end
  end
"finis" tempmsgfile
if isthisuser = 1 then
  do
  call writeline mailboxfile, "Status: Unread"
  "set cmstype ht"
  "copyfile" tempmsgfile mailboxfile "(append"
  "set cmstype rt"
  call writeline mailboxfile, "."
  end
call erasefile messagefile
do i = 1 for rcptcount
  address = rcpts.i
  parse var address user "@" node
  if node = "" then node = thisnode
  queue "HELO" originhost
  queue "MAIL FROM:<"||originator||">"
  queue "RCPT TO:<"||user||"@"||node||">"
  queue "DATA"
  call writestackedlines messagefile, 4
  "set cmstype ht"
  "copyfile" tempmsgfile messagefile "(append"
  "set cmstype rt"
  call writeline messagefile, "."
  "finis" messagefile
  call spoolmessage user, node
  call erasefile messagefile
end
call erasefile tempmsgfile
return
 
/*
 * sendreply
 *
 * Compose and send a reply to the current message.
 *
 * arg(1) : 0 if reply, 1 if reply-all
 */
sendreply:
arg isreplyall
thisuser = strip(userid())||"@"||thisnode
cclist = ""
if isreplyall = 1 then
  do
  tolist = from.msgnum
  if replyto.msgnum <> "" & replyto.msgnum <> from.msgnum then
    tolist = tolist||", "||replyto.msgnum
  if to.msgnum <> "" then
    do
    call parseaddresses to.msgnum
    do i = 1 for addresses.0
      if thisuser <> translate(addresses.i) then
        tolist = tolist||", "||addresses.i
      end
    end
  if cc.msgnum <> "" then
    do
    call parseaddresses cc.msgnum
    do i = 1 for addresses.0
      if thisuser <> translate(addresses.i) then
        do
        if cclist = "" then
          cclist = addresses.i
        else
          cclist = cclist||", "||addresses.i
        end
      end
    end
  end
else
  do
  if replyto.msgnum <> "" then
    tolist = replyto.msgnum
  else
    tolist = from.msgnum
  end
queue "HELO "||thisnode
queue "MAIL FROM:<"strip(userid())||"@"||thisnode||">"
linecount = 2
call parseaddresses tolist
do i = 1 for addresses.0
  queue "RCPT TO:<"||addresses.i||">"
  end
linecount = linecount + addresses.0
if cclist <> "" then
  do
  call parseaddresses cclist
  do i = 1 for addresses.0
    queue "RCPT TO:<"||addresses.i||">"
    end
  linecount = linecount + addresses.0
  end
queue "DATA"
queue "Date:" date("Normal") time("Normal") timezone
queue "From:" thisuser
linecount = linecount + 3
maxrcptwidth = maxlinewidth - 8
header = "To: "
do while length(tolist) > maxrcptwidth
  bp = lastpos(",",tolist,maxrcptwidth)
  if bp = 0 then bp = lastpos(" ",tolist,maxrcptwidth)
  queue header||substr(tolist,1,bp)
  linecount = linecount + 1
  tolist = strip(substr(tolist,bp+1))
  header = "    "
  end
if tolist <> "" then
  do
  queue header||tolist
  linecount = linecount + 1
  end
if cclist <> "" then
  do
  header = "cc: "
  do while length(cclist) > maxrcptwidth
    bp = lastpos(",",cclist,maxrcptwidth)
    if bp = 0 then bp = lastpos(" ",cclist,maxrcptwidth)
    queue header||substr(cclist,1,bp)
    linecount = linecount + 1
    cclist = strip(substr(cclist,bp+1))
    header = "    "
    end
  if cclist <> "" then
    do
    queue header||cclist
    linecount = linecount + 1
    end
  end
if translate(substr(subject.msgnum, 1, 3)) = "RE:" then
  queue "Subject:" subject.msgnum
else
  queue "Subject: re:" subject.msgnum
queue ""
linecount = linecount + 2
call writestackedlines messagefile, linecount
say "Please enter reply body, and end with a line containing only '.':"
do forever
  parse pull line
  if line = "." then
    leave
  push line
  call writestackedlines messagefile, 1
end
queue ""
queue from.msgnum "wrote:"
queue "----------------------------------------"
call writestackedlines messagefile, 3
call readlines mailboxfile, start.msgnum, 1
parse pull line
if translate(substr(line, 1, 7)) <> "STATUS:" then
  do
  push strip(left("| " || line, maxlinewidth))
  call writestackedlines messagefile, 1
  end
linecount = end.msgnum - (start.msgnum + 1)
linenum = start.msgnum + 1
do linecount
  call readlines mailboxfile, linenum, 1
  linenum = linenum + 1
  parse pull line
  push strip(left("| " || line, maxlinewidth))
  call writestackedlines messagefile, 1
end
call writeline messagefile, "."
call spoolmessage mailerid, thisnode
if result = 0 then
  say "Reply sent"
else
  say "Failed to send reply, rc =" result
call erasefile messagefile
return

/*
 * parseaddresses
 *
 * Parse the addresses from a list of RFC822-formatted addresses
 * and place them in the global "addresses." stem.
 *
 * arg(1) : RFC822-formatted address list
 */
parseaddresses: procedure expose addresses.
parse arg list
addrcount = 0
do while list <> ""
  parse var list addr "," list
  addr = strip(addr)
  list = strip(list)
  ai = pos("@",addr)
  if ai > 0 then
    do
    li = pos("<",addr)
    gi = pos(">",addr)
    if li > 0 & li < gi & li < ai & ai < gi then
      do
      parse var addr "<" user "@" node ">"
      end
    else
      do
      parse var addr user "@" node
      user = strip(user)
      node = strip(node)
      bi = lastpos(" ",user)
      if bi > 0 then
        do
        user = substr(user,bi + 1)
        end
      bi = pos(" ",node)
      if bi > 0 then
        do
        node = substr(node,i, bi - 1)
        end
      end
    addrcount = addrcount + 1
    addresses.addrcount = strip(user)||"@"||strip(node)
    end
  end /* while */
addresses.0 = addrcount
return
 
/*
 * spoolmessage
 *
 * Spool a mail message to RSCS or a local reader, depending
 * upon the recipient's node name.
 *
 *  arg(1) : recipient user id
 *  arg(2) : name of recipient's node
 */
spoolmessage: procedure expose thisnode messagefile
arg user, node
if node = thisnode then
  do
  "execio 0 cp (string SPOOL PUNCH CLASS M TO" user
  end
else
  do
  "execio 0 cp (string SPOOL PUNCH CLASS M TO RSCS"
  "execio 0 cp (string TAG DEV PUNCH" node user
  end
"set cmstype ht"
"punch" messagefile "(noh"
status = rc
"set cmstype rt"
return status
 
/*
 * updatemailbox
 *
 * Copy mailbox file to a new file, and omit messages marked for deletion.
 */
updatemailbox:
m = 1
msgswritten = 0
do while m <= msgcount
  if status.m <> "DELETE" then
    do
    if status.m <> " " then
      do
      push "Status:" status.m
      call writestackedlines tempmbxfile, 1
      end
    call readlines mailboxfile, start.m, 1
    parse pull line
    if translate(substr(line,1,7)) <> "STATUS:" then
      do
      push line
      call writestackedlines tempmbxfile, 1
      end
    linecount = (end.m - (start.m + 1)) + 1
    call readlines mailboxfile, (start.m + 1), linecount
    call writestackedlines tempmbxfile, linecount
    msgswritten = msgswritten + 1
    end
  m = m + 1
end
call erasefile mailboxfile
if msgswritten > 0 then
  do
  "set cmstype ht"
  "rename" tempmbxfile mailboxfile
  "set cmstype rt"
  end
return
 
/*
 * readlines
 *
 * Read lines from a file to the stack.
 *
 *  arg(1) : file name
 *  arg(2) : first record number to read
 *  arg(3) : number of records to read
 */
readlines: procedure
"set cmstype ht"
"executil read" arg(1) arg(2) arg(3)
status = rc
"set cmstype rt"
return status
 
/*
 * writestackedlines
 *
 * Write lines to a file from the stack.
 *
 *  arg(1) : file name
 *  arg(2) : number of stacked lines
 */
writestackedlines: procedure expose maxlinewidth
"set cmstype ht"
"executil write" arg(1) "*" arg(2) "v" maxlinewidth "lcase"
status = rc
"set cmstype rt"
return status
 
/*
 * writeline
 *
 * Write a specified line of text to a file.
 *
 *  arg(1) : file name
 *  arg(2) : text to write
 */
writeline: procedure
"set cmstype ht"
"executil write" arg(1) "* 1 v 100 lcase ("||arg(2)||")"
status = rc
"set cmstype rt"
return status
 
/*
 * erasefile
 *
 * Erase a specified file.
 *
 *  arg(1) : file name
 */
erasefile: procedure
"set cmstype ht"
"erase" arg(1)
status = rc
"set cmstype rt"
return status
